name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            build_cmd: npm run publish-win64
          - os: windows-latest
            build_cmd: npm run publish-win32
          - os: macos-latest
            build_cmd: npm run publish-mac

    steps:
      - uses: actions/checkout@v4
      - uses: actions/checkout@v4
        with:
          repository: kenichiro-kimura/libsoratun
          path: libsoratun 
      - name: Set up go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.2
      - name: build libsoratun
        run: |
          cd libsoratun
          make libs
          cd ..
          mkdir dist
          cp libsoratun/lib/shared/libsoratun.* dist/
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22         
      - name: Install dependencies
        run: npm ci

      - name: Prepare for codesigning
        if: matrix.os == 'macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create temporary keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          echo -n "$APPLE_CERTIFICATE" | base64 --decode > $RUNNER_TEMP/certificate.p12
          security import $RUNNER_TEMP/certificate.p12 -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Enable codesigning from keychain
          security set-key-partition-list -S "apple-tool:,apple:,codesign:" -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Verify certificate import
          security find-identity -v -p codesigning $KEYCHAIN_PATH
      
      # Download azure signing tool(Windows only)
      - name: Download AzureSignTool
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p tools
          Invoke-WebRequest -Uri "https://github.com/vcsjones/AzureSignTool/releases/download/v6.0.1/AzureSignTool-x64.exe" -OutFile "tools/AzureSignTool-x64.exe"
      
      - name: Build Electron App
        run: ${{ matrix.build_cmd }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}f
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          
      - name: Sign to a binary for Windows
        if: matrix.os == 'windows-latest'
        run: |
          tools/AzureSignTool-x64.exe sign -kvu "${{ secrets.AZURE_KEY_VAULT_URI }}" -kvi "${{ secrets.AZURE_CLIENT_ID }}" -kvt "${{ secrets.AZURE_TENANT_ID }}" -kvs "${{ secrets.AZURE_SIGNING_SECRET }}" -kvc "${{ secrets.AZURE_CERT_NAME }}" -tr http://timestamp.digicert.com -td "sha256" -fd "sha256" -ph -v "dist/soracom-button*.exe"
      
      # Get version from package.json
      - name: Get version
        id: get_version
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          for /f "delims=" %%v in ('node -p "require('./package.json').version"') do set VERSION=%%v
          echo VERSION=%VERSION%>> %GITHUB_ENV%

      # Get existing release tag_name
      - name: Get existing release tag_name
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $release = gh release list --limit 100 --json tagName,name | ConvertFrom-Json | Where-Object { $_.name -eq "$env:VERSION" }
          if ($release) {
            echo "RELEASE_TAG_NAME=$($release.tagName)" | Out-File -FilePath $env:GITHUB_ENV -Append
          }
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ env.VERSION }}

      # Publish signed binary (only Windows)
      - name: Upload Release Asset
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*.exe
          draft: true
          prerelease: false
          generate_release_notes: true
          overwrite: true
          tag_name: ${{ env.RELEASE_TAG_NAME }}
          name: ${{ env.VERSION }}
        env:
          VERSION: ${{ env.VERSION }}
          RELEASE_TAG_NAME: ${{ env.RELEASE_TAG_NAME }}
