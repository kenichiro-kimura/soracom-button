name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            build_cmd: npm run publish-win64
          - os: windows-latest
            build_cmd: npm run publish-win32
          - os: macos-latest
            build_cmd: npm run publish-mac

    steps:
      - uses: actions/checkout@v4
      - uses: actions/checkout@v4
        with:
          repository: kenichiro-kimura/libsoratun
          path: libsoratun 
      - name: Set up go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.2
      - name: build libsoratun
        run: |
          cd libsoratun
          make libs
          cd ..
          mkdir dist
          cp libsoratun/lib/shared/libsoratun.* dist/
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22         
      - name: Install dependencies
        run: npm ci
      
      # Download azure signing tool(Windows only)
      - name: Download AzureSignTool
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p tools
          Invoke-WebRequest -Uri "https://github.com/vcsjones/AzureSignTool/releases/download/v6.0.1/AzureSignTool-x64.exe" -OutFile "tools/AzureSignTool-x64.exe"
      
      - name: Build Electron App
        run: ${{ matrix.build_cmd }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Sign to a binary for Windows
        if: matrix.os == 'windows-latest'
        run: |
          tools/AzureSignTool-x64.exe sign -kvu "${{ secrets.AZURE_KEY_VAULT_URI }}" -kvi "${{ secrets.AZURE_CLIENT_ID }}" -kvt "${{ secrets.AZURE_TENANT_ID }}" -kvs "${{ secrets.AZURE_SIGNING_SECRET }}" -kvc "${{ secrets.AZURE_CERT_NAME }}" -tr http://timestamp.digicert.com -td "sha256" -fd "sha256" -ph -v "dist/soracom-button*.exe"
      
      # Get version from package.json
      - name: Get version
        id: get_version
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          for /f "delims=" %%v in ('node -p "require('./package.json').version"') do set VERSION=%%v
          echo VERSION=%VERSION%>> %GITHUB_ENV%
          
      # Publish signed binary (only Windows)
      - name: Upload Release Asset
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*.exe
          draft: true
          prerelease: false
          generate_release_notes: true
          overwrite: true
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || '' }}
          name: ${{ env.VERSION }}
        env:
          VERSION: ${{ env.VERSION }}
